


type Person interface {
	id	 string
	name string
	age  int
}
type ChangeName interface {
	id   string
	name string
}
type ChangeAge interface {
	id 	string
	age int
}

rule EqualOperator ({
	left    message
	right   message
}) {
	isEqual  bool
	notEqual bool
}

rule EqualOperator ({
	left[C1]    message
	right[C2]   message
}) {
	isEqual          bool
	notEqual[C1, C2] bool
}

unit View({
	nameChanges stream<ChangeName>
	ageChanges	stream<ChangeAge>
}) {
	nameChange := nameChanges.each()
	ageChange := ageChanges.each()

	person :=
		| nameChange.id == ageChange.id
		| {id: nameChange.id, name: nameChange.name, age: ageChange.age}

	personStream := person.stream()


	tree := forest.each()
	branch := tree.slice(10).each()

	toRedColorBranch :=
		| branch.len < 10
		| branch

	redBranch := {
		...toRedColorBranch,
		color: "red",
	}

	a +x *(b -c)/ d
	d x b c - * / a +
	Person {
		name
	}

	body {
		padding: 10px;
	}

	body padding 10px
	body margin 10px
	body padding 10px

	newBranchesStream := redBranch.stream()

//
//	partialView := {
//		id: nameChange.id,
//		name: nameChange.name,
//		age: ageChange.age,
//	}
//
//	joined := OneToOne({
//		leftId: nameChange.id,
//		rightId: ageChange.id,
//		partialView: partialView,
//	})
//	view1 := joined.view
//
//	Person[view1] clone := clone(view1)


}

// std module
//unit OneToOne ({
//	leftId		string
//	rightId		string
//	partialView[leftContext, rightContext]	message
//}) {
//	// ----------
//	// some work
//
//	// -----------
//	// then result
//	type ViewType
//	var view type(partialView)
//}
