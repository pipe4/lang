
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_GoGLL NT = iota
	NT_Import 
	NT_ImportBlock 
	NT_ImportName 
	NT_ImportPath 
	NT_ImportStatements 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // ( 
	T_1  // ) 
	T_2  // import 
	T_3  // localDeclarationName 
	T_4  // string 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"GoGLL", /* NT_GoGLL */
	"Import", /* NT_Import */
	"ImportBlock", /* NT_ImportBlock */
	"ImportName", /* NT_ImportName */
	"ImportPath", /* NT_ImportPath */
	"ImportStatements", /* NT_ImportStatements */ 
}

var tToString = []string { 
	"(", /* T_0 */
	")", /* T_1 */
	"import", /* T_2 */
	"localDeclarationName", /* T_3 */
	"string", /* T_4 */ 
}

var stringNT = map[string]NT{ 
	"GoGLL":NT_GoGLL,
	"Import":NT_Import,
	"ImportBlock":NT_ImportBlock,
	"ImportName":NT_ImportName,
	"ImportPath":NT_ImportPath,
	"ImportStatements":NT_ImportStatements,
}
